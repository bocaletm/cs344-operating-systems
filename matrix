#!/bin/bash

##################
# Mario Bocaletti
# CS344 Operating Systems
# matrix operations
##################

#exit early for easy-to-catch errors
if [ "$#" -gt 3 ];
then
  echo Error. Too many arguments. Exiting now... 1>&2
  exit 1
elif [ "$#" -lt 1 ];
then 
  echo Error. Too few arguments. Exiting now... 1>&2
  exit 1
fi

dims() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
    matrix=$(cat $1)
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi
  #count the rows
  rows=$(echo "$matrix" | wc -l)
  #count the columns (number of items in the first line)
  firstLine=$(echo "$matrix" | head -1)
  columns=0
  for num in $firstLine; do
    ((columns++)) 
  done
  printf "$rows $columns\n"
}

transpose() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
    matrix=$(cat $1)
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi
  #use dims to get the columns
  dims=$(echo "$matrix" | dims)
  arr=($dims)
  cols=${arr[1]}
  #cut each column and turn it into a row by replacing newlines with tabs
  for ((i=1; i <= $cols; i++)); do
    echo "$matrix" | cut -f$i | tr '\n' '\t'
    echo
  done

}

mean() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
    matrix=$(cat $1)
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column count
  dims=$(echo "$matrix" | dims)
  arr=($dims)
  cols=${arr[1]}

  #use transpose to traverse each column more easily in row form 
  tranMatrix=$(echo "$matrix" | transpose)
  result=''
  while read -r line; do
    count=0
    sum=0
    for num in $line; do
      (( sum+=$num ))
      (( count+=1 ))
    done

    mean=$(( ($sum + ($count / 2)) / $count ))
    #format result in matrix format
    if [ "$result" == '' ]; then
      result=$mean
    else
      result=$result'\t'$mean
    fi
  done <<< $tranMatrix
  result=$result'\n'
  printf $result
}

add() {
  #get the matrixes into variables
  if [ "$#" -eq 2 ]; then
    matrix1=$(cat $1)
    matrix2=$(cat $2)
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column and row counts
  dims=$(echo "$matrix1" | dims)
  arr=($dims)
  rows=${arr[0]}
  cols=${arr[1]}
  count=$(expr $rows \* $cols)
  sum=0

  #use echo to trim all the whitespace to make array conversion easier
  matrix1=$(echo $matrix1)
  matrix2=$(echo $matrix2)

  #convert the strings to arrays
  matrix1=($matrix1)
  matrix2=($matrix2)
  
  #perform additions
  idx=0
  result=''

  colCount=$cols
  for ((j=0; j < $count; j++)); do
    #add the numbers
    sum=$(expr ${matrix1[$idx]} + ${matrix1[$idx]})
    #format back into rows and columns
    if [ "$result" == '' ]; then
      result=$sum
    elif [ $colCount -gt 0 ]; then
      result=$result'\t'$sum
    else
      result="$result"'\n'$sum
      colCount=$cols
    fi
    ((idx++))
    ((colCount--))
  done
  result=$result'\n'
  printf $result
}

multiply() {
  #get the matrixes into variables
  if [ "$#" -eq 2 ]; then
    matrix1=$(cat $1)
    matrix2=$(cat $2)
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column and row counts
  dims=$(echo "$matrix1" | dims)
  arr=($dims)
  rows=${arr[0]}
  cols=${arr[1]}
  count=$(expr $rows \* $cols)
  sum=0

  #use echo to trim all the whitespace to make array conversion easier
  matrix1=$(echo $matrix1)
  matrix2=$(echo $matrix2)

  #convert the strings to arrays
  matrix1=($matrix1)
  matrix2=($matrix2)
  
  #perform additions
  idx=0
  result=''

  colCount=$cols
  for ((j=0; j < $count; j++)); do
    #add the numbers
    sum=$(expr ${matrix1[$idx]} \* ${matrix1[$idx]})
    #format back into rows and columns
    if [ "$result" == '' ]; then
      result=$sum
    elif [ $colCount -gt 0 ]; then
      result=$result'\t'$sum
    else
      result="$result"'\n'$sum
      colCount=$cols
    fi
    ((idx++))
    ((colCount--))
  done
  result=$result'\n'
  printf $result
}

##check for empty matrix
#if [[ $matrix == "" ]]; then
#    echo No matrix passed. Exiting now... 1>&2
#    exit 1
#fi
#
##check for non integer input
#nonIntegers=$(cat $matrix | grep -v [1-9])
#if [[ $nonIntegers != "" ]]; then
#    echo Invalid matrix. Some elements are not integers. Exiting now...
#    exit 1
#fi
#
#check for valid operations
operation=$1
operations=("dims" "transpose" "mean" "add" "multiply")
#error out if operations does not contain the argument
if [[ ! " ${operations[@]} " =~ " ${operation} " ]]; then
  echo Invalid operation \"$1\". Exiting now... 1>&2
  exit 1
fi

#call the functions
$1 "${@:2}"


