#!/bin/bash

##################
# Mario Bocaletti
# CS344 Operating Systems
# matrix operations
##################

#exit early for easy-to-catch errors
if [ "$#" -gt 3 ];
then
  echo Error. Too many arguments. Exiting now... 1>&2
  exit 1
elif [ "$#" -lt 1 ];
then 
  echo Error. Too few arguments. Exiting now... 1>&2
  exit 1
fi

#check for valid operations
operation=$1
operations=("dims" "transpose" "mean" "add" "multiply")
#error out if operations does not contain the argument
if [[ ! " ${operations[@]} " =~ " ${operation} " ]]; then
  echo Invalid operation \"$1\". Exiting now... 1>&2
  exit 1
fi

dims() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
    if [ -r $1 ]; then
      matrix=$(cat $1)
    else
      echo Error. No file by name $1. 1>&2
      exit 1
    fi
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi
  #count the rows
  rows=$(echo "$matrix" | wc -l)
  #count the columns (number of items in the first line)
  firstLine=$(echo "$matrix" | head -1)
  columns=0
  for num in $firstLine; do
    ((columns++)) 
  done
  printf "$rows $columns\n"
  exit 0
}

transpose() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
      #check  if file can be read
    if [ -r $1 ]; then
      matrix=$(cat $1)
    else
      echo Error. No file by name $1. 1>&2
      exit 1
    fi
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi
  #use dims to get the columns
  dims=$(echo "$matrix" | dims)
  arr=($dims)
  cols=${arr[1]}
  #cut each column and turn it into a row by replacing newlines with tabs
  for ((i=1; i <= $cols; i++)); do
    #tr leaves trailing tab
    row="$(echo "$matrix" | cut -f$i | tr '\n' '\t')"
    #remove trailing tab
    row=${row%?}
    echo "$row"
  done
  exit 0
}

mean() {
  #get the matrix into a variable
  if [ "$#" -eq 0 ]; then
    matrix=$(cat)
  elif [ "$#" -eq 1 ]; then
      #check if file can be read
    if [ -r $1 ]; then
      matrix=$(cat $1)
    else
      echo Error. No file by name $1. 1>&2
      exit 1
    fi
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column count
  dims=$(echo "$matrix" | dims)
  arr=($dims)
  cols=${arr[1]}

  #use transpose to traverse each column more easily in row form 
  tranMatrix=$(echo "$matrix" | transpose)
  result=''
  #process the transposed matrix line by line
  while read -r line; do
    count=0
    sum=0
    for num in $line; do
      (( sum+=$num ))
      (( count+=1 ))
    done

    #use formula for proper rounding
    #(sum + (count/2)*( (sum>0)*2-1 )) / count
    ((x=$count / 2))
    ((y=$sum > 0))
    ((y=$y * 2 - 1))
    ((z=$x * $y + $sum))
    ((mean=$z / $count))
    #format result in matrix format
    if [ "$result" == '' ]; then
      result=$mean
    else
      result=$result'\t'$mean
    fi
  done <<< $tranMatrix
  echo -e "$result"
  exit 0
}

add() {
  #get the matrixes into variables
  if [ "$#" -eq 2 ]; then
      #check if both files can be read
    if [ -r $1 ] & [ -r $2 ]; then
      matrix1=$(cat $1)
      matrix2=$(cat $2)
    else
      echo Error. Cannot find both $1 and $2. Exiting now... 1>&2
      exit 1
    fi
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column and row counts
  dims1=$(echo "$matrix1" | dims)
  dims2=$(echo "$matrix2" | dims)
  #check if the operation is valid
  if [ "$dims1" != "$dims2" ]; then
    echo Error. Matrixes cannot be added. Exiting now... 1>&2
    exit 1
  fi
  arr=($dims1)
  rows=${arr[0]}
  cols=${arr[1]}
  count=$(expr $rows \* $cols)
  sum=0

  #use echo to trim all the whitespace to make array conversion easier
  matrix1=$(echo $matrix1)
  matrix2=$(echo $matrix2)

  #convert the strings to arrays
  matrix1=($matrix1)
  matrix2=($matrix2)
  
  #perform additions
  idx=0
  result=''

  colCount=$cols
  for ((j=0; j < $count; j++)); do
    #add the numbers
    sum=$((${matrix1[$idx]}+${matrix2[$idx]}))
    #format back into rows and columns
    if [ "$result" == '' ]; then
      result=$sum
    elif [ $colCount -gt 0 ]; then
      result=$result'\t'$sum
    else
      result="$result"'\n'$sum
      colCount=$cols
    fi
    ((idx++))
    ((colCount--))
  done

  result=$result'\n'
  #print argument interpreting escapes
  printf '%b' "$result"
  exit 0
}

multiply() {
  #get the matrixes into variables
  if [ "$#" -eq 2 ]; then
      #check if files can be read
    if [ -r $1 ] & [ -r $2 ]; then
      matrix1=$(cat $1)
      matrix2=$(cat $2)
    else
      echo Error. Cannot find both $1 and $2. Exiting now... 1>&2
      exit 1
    fi
  else
    echo Error. Invalid number of arguments. Exiting now... 1>&2
    exit 1
  fi

  #use dims to get the column and row counts
  dims1=$(echo "$matrix1" | dims)
  dims2=$(echo "$matrix2" | dims)
 
   #get the rows and columns
  arr=($dims1)
  arr2=($dims2)
  rows=${arr[0]}
  rows2=${arr2[0]}
  cols=${arr[1]}
  count=$(expr $rows \* $cols)

  #check if the operation is valid
  if [ "$cols" != "$rows2" ]; then
    echo Error. Matrixes cannot be multiplied. Exiting now... 1>&2
    exit 1
  fi

  #transpose the second matrix to make traversing columns easier
  matrix2=$(echo "$matrix2" | transpose)

  #multiply the matrices
  result='' 
  while read -r line1; do
    while read -r line2; do
        mul=0
        sum=0
        #convert matrices to arrays for easy indexing
        line1Arr=($line1)
        line2Arr=($line2)
        for ((i=0; i < $rows; i++)); do
            x=${line1Arr[i]}
            y=${line2Arr[i]}
            #don't multiply by zero
            if [[ "$x" -ne "0" ]] && [[ "$y" -ne "0" ]]; then
                mul=$(($x * $y))
                sum=$(($sum + $mul))
            fi
        done
        result=$result$sum'\t'
    done <<< $matrix2
    #replace trailing tab with newline
    result=${result%?}
    result=${result%?}
    result="$result"'\n'
  done <<< $matrix1

  #print argument interpreting escapes
  printf '%b' "$result"
  exit 0
}

# PLEASE IGNORE
# extra validation not in the requirements (decided to leave out)
##check for non integer input
#nonIntegers=$(cat $matrix | grep -v [1-9])
#if [[ $nonIntegers != "" ]]; then
#    echo Invalid matrix. Some elements are not integers. Exiting now... 1>&2
#    exit 1
#fi

#call the functions
$1 "${@:2}"

